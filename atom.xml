<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Decembrist blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-17T19:07:29.316Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>decembrist</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Всё не так с целочисленными примитивами в java</title>
    <link href="http://yoursite.com/2018/06/17/primitivhye-tipy/"/>
    <id>http://yoursite.com/2018/06/17/primitivhye-tipy/</id>
    <published>2018-06-17T17:21:56.244Z</published>
    <updated>2018-06-17T19:07:29.316Z</updated>
    
    <content type="html"><![CDATA[<p>В языке Java 8 примитивных типов</p><ul><li>Целочисленные byte, short, int, long (отчасти/полностью char)</li><li>Вещественные double и float</li><li>Булевый boolean соответственно</li></ul><p>Если, скажем, ты будешь выполнять простейшие операции вроде сумма разница (+/-) или любыми другими<br>с 2мя переменными одного типа, то результирующий тип более или менее предсказуем.</p><p>К примеру:</p><pre><code>int a = 2;int b =3;</code></pre><p>Результирующий тип операции <code>a + b</code> будет <code>int</code></p><h3 id="Как-это-проверить"><a href="#Как-это-проверить" class="headerlink" title="Как это проверить"></a>Как это проверить</h3><p>(Если ты пока не сильно понимаешь в ООП то можешь скопипастить вот такой класс для проверки типов )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">private</span> String MESSAGE_TEMPLATE = <span class="string">"This is %s type"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    System.out.println(String.format(MESSAGE_TEMPLATE, <span class="string">"int"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> a)</span> </span>&#123;</span><br><span class="line">    System.out.println(String.format(MESSAGE_TEMPLATE, <span class="string">"long"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">short</span> a)</span> </span>&#123;</span><br><span class="line">    System.out.println(String.format(MESSAGE_TEMPLATE, <span class="string">"short"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">byte</span> a)</span> </span>&#123;</span><br><span class="line">    System.out.println(String.format(MESSAGE_TEMPLATE, <span class="string">"byte"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Объяснение кода класса выходит за границы данного видео, но если вкратце, то вызов метода<br>check у экземпляра этого класса с примитивным целочисленным параметром будет выводить<br>текст <code>&quot;This is ${название типа} type&quot;</code></p><p>проверим:</p><pre><code>int a = 2; //объявлена переменная примитивного типа intfinal Type type = new Type(); //создаётся экземпляр класса Type (код выше)type.check(a); //проверяем тип</code></pre><p>Вывод: <code>This is int type</code></p><p>Пока всё логично:<br>Сложим-ка теперь 2 переменных типа <code>int</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>; <span class="comment">//объявлена первая переменная примитивного типа int</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>; <span class="comment">//объявлена вторая переменная примитивного типа int</span></span><br><span class="line"><span class="keyword">final</span> Type type = <span class="keyword">new</span> Type(); <span class="comment">//создаётся экземпляр класса Type (код выше)</span></span><br><span class="line">type.check(a + b); <span class="comment">//проверяем тип</span></span><br></pre></td></tr></table></figure><p>Вывод <code>This is int type</code></p><p>Пока всё логично.</p><p>Но что будет если сложить 2 примитива разных типов:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> a = <span class="number">2</span>; <span class="comment">//объявлена первая переменная примитивного типа long</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>; <span class="comment">//объявлена вторая переменная примитивного типа int</span></span><br><span class="line"><span class="keyword">final</span> Type type = <span class="keyword">new</span> Type(); <span class="comment">//создаётся экземпляр класса Type (код выше)</span></span><br><span class="line">type.check(a + b); <span class="comment">//проверяется тип</span></span><br></pre></td></tr></table></figure><p>Какой вывод? А?</p><p>Правильный ответ <code>This is long type лонг</code></p><p>Почему?</p><p>Возможно ты не знаешь но типы <code>byte, short, int, long</code> отличаются вместимостью<br>(что означает что в памяти они занимают разное количество байтиков)</p><p><code>byte</code> - 1 байтик - Диапазон значений от -128 до 127 включительно,</p><p><code>short</code> - 2 байтиков - Диапазон значений от -32768 до 32767 включительно,</p><p><code>int</code> - 4 байтиков - Диапазон значений от -2147483648 до 2147483647 включительно,</p><p><code>long</code> - 8 байтиков - Диапазон значений от -2 в 63 степени до 2 в 63 степени - 1 включительно</p><p>cоответственно вмещаемый диапазон значений тоже увеличивается с количеством байтов<br>ты можешь увидеть конкретные числа в даннной таблице</p><p>java конвертирует оба операнда в более широкий тип изза указаных выше причин<br>таким образом фактически складываются 2 типа лонг и результатом само собой будет тип лонг</p><p>а теперь поглядим что будет если указанные диапазоны значений переполнить<br>для типа <code>int</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> intMax = <span class="number">2147483647</span>; <span class="comment">//запись в переменную максимально возможного числа типа int</span></span><br><span class="line">System.out.println(intMax + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>вывод казалось бы должен быть 2147483648<br>но вывод -2147483648</p><p>Так как тип <code>int</code> не вмещает больше 4 байт или числа 2147483647 следующее число в последовательности<br>это минимально возможное значение диапазона типа <code>int</code><br>таким образом число будет вращаться по кругу вновь при каждом переполнении возвращаться к минимальному<br>и наоборот соответственно, что может ызывать ошибку в твоих вычислениях</p><p>Если ты предполагаешь что число может быть выше возможного максимального значения используй более широкий тип<br>Минимальное и максимальное значения типа <code>int</code> можно получить через статический метод <code>Integer.MIN_VALUE</code><br>и <code>Integer.MAX_VALUE</code> соответственно <code>int intMax = Integer.MAX_VALUE;</code></p><p>типы <code>Byte Short</code> и <code>Long</code> работают аналогично</p><p>Таким образом стоит запомнить что при операциях с разными типами данных результат будет более широкого типа</p><p>Посмотрим что будет при операциях с типами <code>byte</code> и <code>short</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> a = <span class="number">2</span>; <span class="comment">//объявлена первая переменная примитивного типа byte</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>; <span class="comment">//объявлена первая переменная примитивного типа int</span></span><br><span class="line">Type type = <span class="keyword">new</span> Type(); <span class="comment">//создаётся экземпляр класса Type (код выше)</span></span><br><span class="line">type.check(a + b); <span class="comment">//проверяется тип</span></span><br></pre></td></tr></table></figure><p>вывод: <code>This is int type</code><br>Чтож, вполне логично исходя из изложенного выше, результат более широкого типа <code>int</code></p><p>Посмотрим на такой пример</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> a = <span class="number">2</span>; <span class="comment">//объявлена первая переменная примитивного типа byte</span></span><br><span class="line"><span class="keyword">short</span> b = <span class="number">3</span>; <span class="comment">//объявлена первая переменная примитивного типа short</span></span><br><span class="line">Type type = <span class="keyword">new</span> Type(); <span class="comment">//создаётся экземпляр класса Type (код выше)</span></span><br><span class="line">type.check(a + b); <span class="comment">//проверяется тип</span></span><br></pre></td></tr></table></figure><p>вывод: <code>This is int type</code></p><p>Возможно выглядит неожиданно снова тип int<br>Если почитать спецификации Java машины можно найти пару строк об этом<br>Перед любой операции с типами <code>byte</code> или <code>short</code> оба операнда будут сначала конвертированы<br>в тип <code>int</code> а <code>int + int</code> даёт <code>int</code></p><blockquote><p>When an operator applies binary numeric promotion to a pair of operands, each of<br>which must denote a value that is convertible to a numeric type, the following rules apply,<br>in order, using widening conversion (§5.1.2) to convert operands as necessary:<br>If any of the operands is of a reference type, unboxing conversion (§5.1.8) is performed. Then:<br>If either operand is of type double, the other is converted to double.<br>Otherwise, if either operand is of type float, the other is converted to float.<br>Otherwise, if either operand is of type long, the other is converted to long.<br>Otherwise, both operands are converted to type int.</p></blockquote><p>таким образом код</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">byte</span> c = a + b;</span><br></pre></td></tr></table></figure><p>компилироваться не будет</p><h3 id="Подведем-итоги"><a href="#Подведем-итоги" class="headerlink" title="Подведем итоги"></a>Подведем итоги</h3><ol><li>Если другой примитивный целочисленный тип выполняет операцию с типом <code>long</code> результат будет типа <code>Long</code></li><li>Если среди операторов типа <code>long</code> нет, то результатом операций будет тип <code>int</code></li></ol><p>Ну чтож на этом на сегодня всё, можешь самостоятельно попробовать подобные трюки с<br>типами <code>float</code> и <code>double</code> или <code>char</code> по секрету скажу, там всё примерно также</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;В языке Java 8 примитивных типов&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Целочисленные byte, short, int, long (отчасти/полностью char)&lt;/li&gt;
&lt;li&gt;Вещественные double 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/06/17/hello-world/"/>
    <id>http://yoursite.com/2018/06/17/hello-world/</id>
    <published>2018-06-17T17:06:13.064Z</published>
    <updated>2018-06-17T17:06:13.065Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
